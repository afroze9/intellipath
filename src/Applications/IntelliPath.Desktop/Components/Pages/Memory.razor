@page "/memory"
@using IntelliPath.Desktop.Services
@using IntelliPath.Desktop.ViewModels
@using IntelliPath.Shared.Models.Orchestrator

<PageTitle>Memory</PageTitle>

<FluentCard>
    <FluentLabel Typo="Typography.H1">Memory</FluentLabel>
    <EditForm Model="@memory" OnValidSubmit="@HandleValidSubmit" FormName="memory_form" novalidate Style="width: 100%">
        <DataAnnotationsValidator/>
        <FluentValidationSummary/>

        <FluentStack Orientation="Orientation.Vertical" Style="width: 100%">
            <div style="width: 100%">
                <FluentTextArea Name="description"
                                Label="Description"
                                @bind-Value="memory.Description"
                                Required
                                Style="width: 100%"/>
                <FluentValidationMessage For="@(() => memory.Description)"/>
            </div>
            <div style="width: 100%">
                <FluentAutocomplete
                    TOption="TagViewModel"
                    Name="tags"
                    AutoComplete="off"
                    Required
                    Label="Select Tags"
                    Placeholder="Select Tags"
                    MaximumSelectedOptions="3"
                    OptionText="@(item => item.Name)"
                    Multiple="true"
                    OnOptionsSearch="@OnSearchAsync"
                    @bind-SelectedOptions="@memory.Tags"
                    Style="width: 100%"/>
                <FluentValidationMessage For="@(() => memory.Tags)"/>
            </div>

            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save Memory</FluentButton>
        </FluentStack>
    </EditForm>

    <FluentDataGrid Items="@Memories" Style="margin-top: 1rem">
        <PropertyColumn Property="@(p => p.Description)" Sortable="true"/>
        <PropertyColumn Property="@(p => string.Join(", ", p.Tags))" Sortable="true" Title="Tags"/>
    </FluentDataGrid>
</FluentCard>

@code
{
    [Inject] private IMemoryClient MemoryClient { get; set; } = default!;

    [Inject] private IToastService ToastService { get; set; } = default!;

    private IQueryable<MemoryModel> Memories { get; set; } = new List<MemoryModel>().AsQueryable();

    private List<TagViewModel> Tags { get; set; } = [];

    [SupplyParameterFromForm]
    private MemoryViewModel memory { get; set; } = new ()
    {
        Description = string.Empty,
    };

    protected override async Task OnInitializedAsync()
    {
        List<MemoryModel> memories = await MemoryClient.GetMemoriesAsync();
        List<MemoryTagModel> tags = await MemoryClient.GetTagsAsync();

        Memories = memories.AsQueryable();
        Tags = tags.Select(x => new TagViewModel()
        {
            Name = x.Name,
        }).ToList();

        StateHasChanged();
    }

    private async Task OnSearchAsync(OptionsSearchEventArgs<TagViewModel> e)
    {
        e.Items = Tags.Where(x => x.Name.StartsWith(e.Text, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(x => x.Name);
    }

    private async Task HandleValidSubmit()
    {
        if (memory.Description == null || !memory.Tags.Any())
        {
            return;
        }

        try
        {
            await MemoryClient.SaveMemoryAsync(new MemoryModel()
            {
                Tags = memory.Tags.Select(x => x.Name).ToList(),
                Description = memory.Description,
            });

            Memories = (await MemoryClient.GetMemoriesAsync()).AsQueryable();
            memory.Description = string.Empty;
            memory.Tags = [];
            ToastService.ShowSuccess("Memory saved successfully!", timeout: 5000);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Could not save new memory. Please try again later.", timeout: 5000);
        }
    }
}